{
    "docs": [
        {
            "location": "/",
            "text": "Huddle\n\n\nHuddle is an auto-deployment file and application management tool designed to work well in \nauto-scaling environments in which the end number of servers or clients is unknown.  This \nincludes auto-scaling web servers and IoT devices, amongst others.\n\n\nApplications are controlled through huddle using \nconfiguration files\n\nwhich are written in \n.json\n ir \n.ini\n format.  Each file or application to be controlled will\nhave its own configuration file, which may be as simple or as complex as the user wishes.\n\n\nAn example configuration in JSON:\n\n\n{\n  \"repository\": {\n    \"remote\": \"origin\",\n    \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n    \"local path\": \"C:/_code/_git_example\",\n    \"branch\": \"master\",\n    \"executable\": \"C:/Program Files/Git/bin/git.exe\"\n  },\n\n  \"timing\": {\n    \"minimum\": 10,\n    \"maximum\": 20\n  },\n\n  \"application\": {\n    \"start\": \"python -m dummy_app.py\"\n  }\n}\n\n\n\nThe same configuration as an INI file:\n\n\n[repository]\nremote = origin\nremote path: https://github.com/slightlynybbled/dummy.git\nlocal path: C:/_code/_git_example\nbranch: master\nexecutable: C:/Program Files/Git/bin/git.exe\n\n[timing]\nminimum = 10\nmaximum = 20\n\n[application]\nstart = python -m dummy_app.py\n\n\n\nMotivation\n\n\n\n\nIt would appear that most auto-deployment tools are focused on using git hooks and use a 'push'\nmodel to deploy from Git to various nodes.  In the simplest case, this involves knowing the IP\naddress or similar information for each server.  In the most complex cases, this involves \na coordinator and workers testing, deploying, and pushing to the servers.\n\n\nIn an environment of unknown scale - such as auto-scaling web servers and IoT devices, the \ndevices themselves need to be intelligent enough to self-deploy.  This is where huddle comes\nin.  Each device takes charge of its self and does a pull as the git repository is updated.\nThis has the advantage of not requiring any sort of global registry or count of devices and\nscales very well.\n\n\n\n\nCapabilities\n\n\nHuddle will:\n\n\n\n\nperiodically sync the local application branch with the remote repository \n\n\nstop/start the local application as required in order to update \n\n\nperform health checks using http or via raw sockets, restarting your application if necessary\n\n\nperform all of the above on any number of applications\n\n\n\n\nIn addition, huddle will pull from any number of git repositories and initiate any number of \napplications.  Huddle only requires one configuration script per application.\n\n\nServer Requirements\n\n\nIn auto-scaling environments, typically an initial image is created for the server or IoT device \nwhich contains:\n\n\n\n\npython environment\n\n\nhuddle installation\n\n\nappropriate huddle configuration script(s)\n\n\nhuddle loaded at startup (probably \n@restart\n cron job)\n\n\n\n\nEach server then manages its own application suite!",
            "title": "Home"
        },
        {
            "location": "/#huddle",
            "text": "Huddle is an auto-deployment file and application management tool designed to work well in \nauto-scaling environments in which the end number of servers or clients is unknown.  This \nincludes auto-scaling web servers and IoT devices, amongst others.  Applications are controlled through huddle using  configuration files \nwhich are written in  .json  ir  .ini  format.  Each file or application to be controlled will\nhave its own configuration file, which may be as simple or as complex as the user wishes.  An example configuration in JSON:  {\n  \"repository\": {\n    \"remote\": \"origin\",\n    \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n    \"local path\": \"C:/_code/_git_example\",\n    \"branch\": \"master\",\n    \"executable\": \"C:/Program Files/Git/bin/git.exe\"\n  },\n\n  \"timing\": {\n    \"minimum\": 10,\n    \"maximum\": 20\n  },\n\n  \"application\": {\n    \"start\": \"python -m dummy_app.py\"\n  }\n}  The same configuration as an INI file:  [repository]\nremote = origin\nremote path: https://github.com/slightlynybbled/dummy.git\nlocal path: C:/_code/_git_example\nbranch: master\nexecutable: C:/Program Files/Git/bin/git.exe\n\n[timing]\nminimum = 10\nmaximum = 20\n\n[application]\nstart = python -m dummy_app.py",
            "title": "Huddle"
        },
        {
            "location": "/#motivation",
            "text": "It would appear that most auto-deployment tools are focused on using git hooks and use a 'push'\nmodel to deploy from Git to various nodes.  In the simplest case, this involves knowing the IP\naddress or similar information for each server.  In the most complex cases, this involves \na coordinator and workers testing, deploying, and pushing to the servers.  In an environment of unknown scale - such as auto-scaling web servers and IoT devices, the \ndevices themselves need to be intelligent enough to self-deploy.  This is where huddle comes\nin.  Each device takes charge of its self and does a pull as the git repository is updated.\nThis has the advantage of not requiring any sort of global registry or count of devices and\nscales very well.",
            "title": "Motivation"
        },
        {
            "location": "/#capabilities",
            "text": "Huddle will:   periodically sync the local application branch with the remote repository   stop/start the local application as required in order to update   perform health checks using http or via raw sockets, restarting your application if necessary  perform all of the above on any number of applications   In addition, huddle will pull from any number of git repositories and initiate any number of \napplications.  Huddle only requires one configuration script per application.",
            "title": "Capabilities"
        },
        {
            "location": "/#server-requirements",
            "text": "In auto-scaling environments, typically an initial image is created for the server or IoT device \nwhich contains:   python environment  huddle installation  appropriate huddle configuration script(s)  huddle loaded at startup (probably  @restart  cron job)   Each server then manages its own application suite!",
            "title": "Server Requirements"
        },
        {
            "location": "/gettingstarted/",
            "text": "Installation\n\n\nRequirements\n\n\nIn order to properly run Huddle, Git must be installed on the operating system.  In \nWindows environments, download and install the appropriate binary.  On Debian systems,\n\napt install git\n will usually do the trick.\n\n\nInstall\n\n\nHuddle may be installed using pip:\n\n\npip install huddle\n\n\n\nThis will work for most users in most environments.\n\n\nThe most recent revision may also be downloaded from the \n\ngithub repository\n and installed using \n\n\npython setup.py install\n\n\n\nConfiguration\n\n\nFormat\n\n\nHuddle depends on configuration files to perform mosts tasks.  Configuration files are\nin \n.json\n format.  Each file or application to be managed will have one corresponding\nconfiguration file.\n\n\nA simple example of a JSON configuration file would be:\n\n\n{\n    \"repository\": {\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"/home/ubuntu/git_example\"\n    },\n}\n\n\n\nor, if you prefer INI:\n\n\n[repository]\nremote path = https://github.com/slightlynybbled/dummy.git\nlocal path = /home/ubuntu/git_example\n\n\n\nThis configuration file would simply ensure that the local path files are always in\nsync with the remote path files, which are located on the shown git repository.  Huddle \nwill automatically sync the \nlocal path\n with the \nremote path\n repository.\n\n\nSee \nconfig file format\n for more details regarding configuration\nfile settings and for examples.\n\n\nLocation\n\n\nAll config files should reside in the same directory and have an extension of \n.json\n.\nAny file prefixed with an underscore \n_\n will be ignored by huddle.\n\n\n- /home/ubuntu/config_files\n  - /fileset0_config.json \n  - /app0_config.json \n  - /app1_config.ini \n  - /_app2_config.json\n\n\n\nThe above file structure would work.  Note that the file structure is flat.  No files are\nto be located in a subdirectory or they will not be parsed.  Note that the\n\n_app2_config.json\n file would be ignored since it has a leading underscore \n_\n.\n\n\nFiles may be located anywhere on the file system to which huddle has access.\n\n\nStarting Huddle\n\n\nOnce installed, huddle may be started by simply:\n\n\nhuddle -c <config directory path>\n\n\n\nor on a virtual environment named `py3env':\n\n\n./py3env/bin/huddle -c <config directory path>\n\n\n\nOn the first instantiation, it may be necessary to add hosts to the ssh known_hosts \nso that the local machine recognizes remote git repositores without having to type\n'yes' to accept new keys.",
            "title": "Getting Started"
        },
        {
            "location": "/gettingstarted/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/gettingstarted/#requirements",
            "text": "In order to properly run Huddle, Git must be installed on the operating system.  In \nWindows environments, download and install the appropriate binary.  On Debian systems, apt install git  will usually do the trick.",
            "title": "Requirements"
        },
        {
            "location": "/gettingstarted/#install",
            "text": "Huddle may be installed using pip:  pip install huddle  This will work for most users in most environments.  The most recent revision may also be downloaded from the  github repository  and installed using   python setup.py install",
            "title": "Install"
        },
        {
            "location": "/gettingstarted/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/gettingstarted/#format",
            "text": "Huddle depends on configuration files to perform mosts tasks.  Configuration files are\nin  .json  format.  Each file or application to be managed will have one corresponding\nconfiguration file.  A simple example of a JSON configuration file would be:  {\n    \"repository\": {\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"/home/ubuntu/git_example\"\n    },\n}  or, if you prefer INI:  [repository]\nremote path = https://github.com/slightlynybbled/dummy.git\nlocal path = /home/ubuntu/git_example  This configuration file would simply ensure that the local path files are always in\nsync with the remote path files, which are located on the shown git repository.  Huddle \nwill automatically sync the  local path  with the  remote path  repository.  See  config file format  for more details regarding configuration\nfile settings and for examples.",
            "title": "Format"
        },
        {
            "location": "/gettingstarted/#location",
            "text": "All config files should reside in the same directory and have an extension of  .json .\nAny file prefixed with an underscore  _  will be ignored by huddle.  - /home/ubuntu/config_files\n  - /fileset0_config.json \n  - /app0_config.json \n  - /app1_config.ini \n  - /_app2_config.json  The above file structure would work.  Note that the file structure is flat.  No files are\nto be located in a subdirectory or they will not be parsed.  Note that the _app2_config.json  file would be ignored since it has a leading underscore  _ .  Files may be located anywhere on the file system to which huddle has access.",
            "title": "Location"
        },
        {
            "location": "/gettingstarted/#starting-huddle",
            "text": "Once installed, huddle may be started by simply:  huddle -c <config directory path>  or on a virtual environment named `py3env':  ./py3env/bin/huddle -c <config directory path>  On the first instantiation, it may be necessary to add hosts to the ssh known_hosts \nso that the local machine recognizes remote git repositores without having to type\n'yes' to accept new keys.",
            "title": "Starting Huddle"
        },
        {
            "location": "/configfiles/",
            "text": "Settings\n\n\nAll settings for a particular configuration are encapsulated into a single JSON object\nwhich consists of key-value pairs.  Each section below will consist of an object that\ncontains the keys and information required to properly configure each key.\n\n\nRepository\n\n\nThe \nrepository\n key contains all remote/local relationship data, including paths to the\nexecutable.  This is the most important field and the only one that is actually required.\n\n\n\n\n\n\n\n\nkey\n\n\ndescription\n\n\nvalid values\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nthe name of the remote\n\n\nany string\n\n\n\"origin\"\n\n\n\n\n\n\nremote path\n\n\nthe remote url or path\n\n\nany string\n\n\n-\n\n\n\n\n\n\nlocal path\n\n\nthe local path\n\n\nany string\n\n\n-\n\n\n\n\n\n\nbranch\n\n\nthe git branch to sync\n\n\nany string\n\n\n\"master\"\n\n\n\n\n\n\nexecutable\n\n\nthe executable\n\n\nstring/path\n\n\n\"/usr/bin/git\" or \"C:\\Program Files\\Git\\bin\\git.exe\"\n\n\n\n\n\n\n\n\nExample of \nrepository\n object (JSON):\n\n\n{\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"master\",\n        \"type\": \"git\",\n        \"executable\": \"/usr/bin/git\"\n    }\n}\n\n\n\nThe equivalent INI:\n\n\n[repository]\nremote = origin\nremote path = https://github.com/slightlynybbled/dummy.git\nlocal path = C:/_code/_git_example\nbranch = master\ntype = git\nexecutable = /usr/bin/git\n\n\n\nTesting\n\n\nThe \ntest\n key is reserved, but not currently implemented.\n\n\nTiming\n\n\nIf no timing is specified, then the default will be 60 seconds.  If only a \nminimum\n is\nspecified, then the remote will be checked at that interval.  Finally, if a \nminimum\n\nand a \nmaximum\n are specified, then the remote will be checked for updates at a random\ntime between the \nminimum\n and \nmaximum\n values.\n\n\n\n\n\n\n\n\nkey\n\n\ndescription\n\n\nvalid values\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nminimum\n\n\nminimum time in seconds\n\n\nany integer\n\n\n60\n\n\n\n\n\n\nmaximum\n\n\nmaximum time in seconds\n\n\nany string\n\n\n-\n\n\n\n\n\n\n\n\nExample of \ntiming\n object (JSON):\n\n\n\"timing\": {\n    \"minimum\": 30,\n    \"maximum\": 300\n},\n\n\n\nThe equivalent INI:\n\n\n[timing]\nminimum = 30\nmaximum = 300\n\n\n\nApplication\n\n\nThe \napplication\n key is used to identify the application that is to be started and \nmonitored.  On remote update, this is the application that will be stopped, updated,\nand reloaded.\n\n\n\n\n\n\n\n\nkey\n\n\ndescription\n\n\nvalid values\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nstart\n\n\nthe start executable\n\n\nany integer\n\n\n60\n\n\n\n\n\n\n\n\nExample of \napplication\n object (JSON):\n\n\n\"application\": {\n    \"start\": \"python -m dummy_app.py\"\n},\n\n\n\nThe equivalent INI:\n\n\n[application]\nstart = python -m dummy_app.py\n\n\n\nScripts\n\n\nThere are two times at which an arbitrary script or group of \nscripts\n must be executed\nand that is \npre-pull\n and \npost-pull\n.  The \npre-pull\n scripts are supplied as a JSON \narray, with each being executed in succession.\n\n\nThis \nscripts\n will execute two scripts before the pull and will reboot the machine\nafter the pull:\n\n\n\"scripts\": {\n    \"pre-pull\": [\n        \"/bin/ls /home/ubuntu/ > /home/ubuntu/values.txt\", \n        \"/bin/ls /etc/ > /home/ubuntu/values.txt\"\n    ],\n    \"post-pull\": [\"sudo reboot\"]\n}\n\n\n\nThe equivalent INI:\n\n\n[scripts]\npre-pull = /bin/ls /home/ubuntu/ > /home/ubuntu/values.txt, /bin/ls /etc/ > /home/ubuntu/values.txt\npost-pull = sudo reboot\n\n\n\nNote that in the INI file, each command is separated by a comma \n,\n.\n\n\nHealth Monitoring/Watchdog\n\n\nApplications sometimes require health monitoring and restart.  Huddle provides two methods of health \nmonitoring, http-based and socket-based.  The http-based monitoring simply checks the remote URL \nand ensures that the \nresponse\n string is contained in the URL response.  The socket-based monitoring \nwill poll a socket on the application and ensure that the \nresponse\n string is contained within the \nresponse.\n\n\n\n\n\n\n\n\nkey\n\n\ndescription\n\n\nvalid values\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nperiod\n\n\nthe watchdog period, in seconds\n\n\ninteger or float\n\n\n60\n\n\n\n\n\n\nhost\n\n\nthe IP address or url to monitor\n\n\nhttp or ip address\n\n\n'127.0.0.1'\n\n\n\n\n\n\nport\n\n\nthe TCP port to monitor\n\n\nstring or integer\n\n\n60\n\n\n\n\n\n\nrequest\n\n\nstring to be sent to the application\n\n\nstring\n\n\n'watchdog'\n\n\n\n\n\n\nresponse\n\n\nthe expected response from a healthy instance\n\n\nstring\n\n\n-\n\n\n\n\n\n\n\n\n\"watchdog\": {\n    \"period\": 60,\n    \"host\": \"127.0.0.1\",\n    \"port\": \"8888\",\n    \"request\": \"watchdog\",\n    \"response\": \"OK\"\n}\n\n\n\nThe equivalent INI:\n\n\n[watchdog]\nperiod = 10\nhost = 127.0.0.1\nport = 8888\nrequest = watchdog\nresponse = OK\n\n\n\nExample Configuration Scripts\n\n\nMinimal File Sync\n\n\nThis configuration will keep the local \nC:/_code/_git_example\n directory in synce with the \nremote \ndevelop\n branch.  It will not start or run any applications.\n\n\n{\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"develop\",\n        \"executable\": \"C:/Program Files/Git/bin/git\"\n    }\n}\n\n\n\nSyncing/Run an Application\n\n\nThis configuration will sync every 60s to 600s.  When there is an update, this application \nwill be halted, updated, then restarted after the update.\n\n\n{\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"master\",\n        \"executable\": \"C:/Program Files/Git/bin/git\"\n    },\n\n    \"timing\": {\n        \"minimum\": 60,\n        \"maximum\": 600\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    }\n}\n\n\n\nSync Application/Reboot Server\n\n\nThis configuration will check the remote every 60s and, when new data is available, huddle\nwill stop the application and reboot the machine with a \npost-pull\n script.\n\n\n{\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"executable\": \"/usr/bin/git\"\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    },\n\n    \"scripts\": {\n        \"post-pull\": [\"/sbin/reboot\"]\n    }\n}\n\n\n\nSync Application with Watchdog\n\n\nThis configuration will check the remote every 60s and, when new data is available, huddle\nwill stop the application, pull the new application version, then restart the application.\n\n\nHuddle will also send a query to port 8888 on the local machine every 15 seconds with the \nstring 'watchdog'.  If the response from the application does not contain the string 'OK',\nthen huddle will stop the application and restart it.\n\n\n{\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"executable\": \"/usr/bin/git\"\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    },\n\n    \"watchdog\": {\n        \"period\": 15,\n        \"host\": \"127.0.0.1\",\n        \"port\": \"8888\",\n        \"request\": \"watchdog\",\n        \"response\": \"OK\"\n    }\n}",
            "title": "Config File Format"
        },
        {
            "location": "/configfiles/#settings",
            "text": "All settings for a particular configuration are encapsulated into a single JSON object\nwhich consists of key-value pairs.  Each section below will consist of an object that\ncontains the keys and information required to properly configure each key.",
            "title": "Settings"
        },
        {
            "location": "/configfiles/#repository",
            "text": "The  repository  key contains all remote/local relationship data, including paths to the\nexecutable.  This is the most important field and the only one that is actually required.     key  description  valid values  default value      remote  the name of the remote  any string  \"origin\"    remote path  the remote url or path  any string  -    local path  the local path  any string  -    branch  the git branch to sync  any string  \"master\"    executable  the executable  string/path  \"/usr/bin/git\" or \"C:\\Program Files\\Git\\bin\\git.exe\"     Example of  repository  object (JSON):  {\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"master\",\n        \"type\": \"git\",\n        \"executable\": \"/usr/bin/git\"\n    }\n}  The equivalent INI:  [repository]\nremote = origin\nremote path = https://github.com/slightlynybbled/dummy.git\nlocal path = C:/_code/_git_example\nbranch = master\ntype = git\nexecutable = /usr/bin/git",
            "title": "Repository"
        },
        {
            "location": "/configfiles/#testing",
            "text": "The  test  key is reserved, but not currently implemented.",
            "title": "Testing"
        },
        {
            "location": "/configfiles/#timing",
            "text": "If no timing is specified, then the default will be 60 seconds.  If only a  minimum  is\nspecified, then the remote will be checked at that interval.  Finally, if a  minimum \nand a  maximum  are specified, then the remote will be checked for updates at a random\ntime between the  minimum  and  maximum  values.     key  description  valid values  default value      minimum  minimum time in seconds  any integer  60    maximum  maximum time in seconds  any string  -     Example of  timing  object (JSON):  \"timing\": {\n    \"minimum\": 30,\n    \"maximum\": 300\n},  The equivalent INI:  [timing]\nminimum = 30\nmaximum = 300",
            "title": "Timing"
        },
        {
            "location": "/configfiles/#application",
            "text": "The  application  key is used to identify the application that is to be started and \nmonitored.  On remote update, this is the application that will be stopped, updated,\nand reloaded.     key  description  valid values  default value      start  the start executable  any integer  60     Example of  application  object (JSON):  \"application\": {\n    \"start\": \"python -m dummy_app.py\"\n},  The equivalent INI:  [application]\nstart = python -m dummy_app.py",
            "title": "Application"
        },
        {
            "location": "/configfiles/#scripts",
            "text": "There are two times at which an arbitrary script or group of  scripts  must be executed\nand that is  pre-pull  and  post-pull .  The  pre-pull  scripts are supplied as a JSON \narray, with each being executed in succession.  This  scripts  will execute two scripts before the pull and will reboot the machine\nafter the pull:  \"scripts\": {\n    \"pre-pull\": [\n        \"/bin/ls /home/ubuntu/ > /home/ubuntu/values.txt\", \n        \"/bin/ls /etc/ > /home/ubuntu/values.txt\"\n    ],\n    \"post-pull\": [\"sudo reboot\"]\n}  The equivalent INI:  [scripts]\npre-pull = /bin/ls /home/ubuntu/ > /home/ubuntu/values.txt, /bin/ls /etc/ > /home/ubuntu/values.txt\npost-pull = sudo reboot  Note that in the INI file, each command is separated by a comma  , .",
            "title": "Scripts"
        },
        {
            "location": "/configfiles/#health-monitoringwatchdog",
            "text": "Applications sometimes require health monitoring and restart.  Huddle provides two methods of health \nmonitoring, http-based and socket-based.  The http-based monitoring simply checks the remote URL \nand ensures that the  response  string is contained in the URL response.  The socket-based monitoring \nwill poll a socket on the application and ensure that the  response  string is contained within the \nresponse.     key  description  valid values  default value      period  the watchdog period, in seconds  integer or float  60    host  the IP address or url to monitor  http or ip address  '127.0.0.1'    port  the TCP port to monitor  string or integer  60    request  string to be sent to the application  string  'watchdog'    response  the expected response from a healthy instance  string  -     \"watchdog\": {\n    \"period\": 60,\n    \"host\": \"127.0.0.1\",\n    \"port\": \"8888\",\n    \"request\": \"watchdog\",\n    \"response\": \"OK\"\n}  The equivalent INI:  [watchdog]\nperiod = 10\nhost = 127.0.0.1\nport = 8888\nrequest = watchdog\nresponse = OK",
            "title": "Health Monitoring/Watchdog"
        },
        {
            "location": "/configfiles/#example-configuration-scripts",
            "text": "",
            "title": "Example Configuration Scripts"
        },
        {
            "location": "/configfiles/#minimal-file-sync",
            "text": "This configuration will keep the local  C:/_code/_git_example  directory in synce with the \nremote  develop  branch.  It will not start or run any applications.  {\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"develop\",\n        \"executable\": \"C:/Program Files/Git/bin/git\"\n    }\n}",
            "title": "Minimal File Sync"
        },
        {
            "location": "/configfiles/#syncingrun-an-application",
            "text": "This configuration will sync every 60s to 600s.  When there is an update, this application \nwill be halted, updated, then restarted after the update.  {\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"master\",\n        \"executable\": \"C:/Program Files/Git/bin/git\"\n    },\n\n    \"timing\": {\n        \"minimum\": 60,\n        \"maximum\": 600\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    }\n}",
            "title": "Syncing/Run an Application"
        },
        {
            "location": "/configfiles/#sync-applicationreboot-server",
            "text": "This configuration will check the remote every 60s and, when new data is available, huddle\nwill stop the application and reboot the machine with a  post-pull  script.  {\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"executable\": \"/usr/bin/git\"\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    },\n\n    \"scripts\": {\n        \"post-pull\": [\"/sbin/reboot\"]\n    }\n}",
            "title": "Sync Application/Reboot Server"
        },
        {
            "location": "/configfiles/#sync-application-with-watchdog",
            "text": "This configuration will check the remote every 60s and, when new data is available, huddle\nwill stop the application, pull the new application version, then restart the application.  Huddle will also send a query to port 8888 on the local machine every 15 seconds with the \nstring 'watchdog'.  If the response from the application does not contain the string 'OK',\nthen huddle will stop the application and restart it.  {\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"executable\": \"/usr/bin/git\"\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    },\n\n    \"watchdog\": {\n        \"period\": 15,\n        \"host\": \"127.0.0.1\",\n        \"port\": \"8888\",\n        \"request\": \"watchdog\",\n        \"response\": \"OK\"\n    }\n}",
            "title": "Sync Application with Watchdog"
        },
        {
            "location": "/server/",
            "text": "Running in a Virtual Environment\n\n\nThe below assumes ubuntu linux, but applies equally as well to other distributions\nand to windows.\n\n\nFirst, the user must create the virtual environment:\n\n\nubuntu ~\\$ virtualenv -p python3 /home/ubuntu/py3env\n\n\n\nInstall Huddle into the environment:\n\n\nubuntu ~\\$ /home/ubuntu/py3env/bin/pip install huddle\n\n\n\nCreate a location for your configuration files:\n\n\nmkdir /home/ubuntu/huddle_config\n\n\n\nPlace all JSON configuration files into the configuration directory, then start huddle:\n\n\n/home/ubuntu/py3env/bin/huddle -c /home/ubuntu/huddle_config\n\n\n\nHuddle will then start your applications!\n\n\nRunning at Startup (Linux)\n\n\nThe most straightforward method of starting Huddle at startup is to use cron jobs.\n\n\ncrontab -e\n\n\n\nOr, if your application requires root permissions:\n\n\nsudo crontab -u root -e\n\n\n\nThis will open a text editor that allows you to enter applications to execute at certain\ntimes.  One of these times is at reboot.  Enter the following line at the bottom of the \nfile:\n\n\n@reboot /home/ubuntu/py3env/bin/huddle -c /home/ubuntu/huddle_config\n\n\n\nNow, Huddle will start and run the configuration files at reboot!\n\n\nServer Considerations\n\n\nGit Executable\n\n\nHuddle, by default, uses the Git executable already installed on the user's machine\nin order to manipulate the Git repository.  In Windows, the default executable is\nin \nC:/Program Files/Git/bin/git\n.  In Linux, the default executable is in \n\\usr\\bin\\git\n.\nIt is recommended that the \nexecutable\n configuration file\nbe used to specify the executable location. \n\n\nAuthentication\n\n\nWhen working with remote repositories, you must have the server set up so that you can\nsimply \ngit clone origin master\n on the command line without having to enter a password.\nThis usually involves creating private and public keys on the pulling server and uploading\nthe public key to the repository server, although other methods are available.\n\n\nIn auto-scaling environments, it is recommended to generate this key on the base image\nso that all of the auto-generated machines have access to the key.",
            "title": "Server"
        },
        {
            "location": "/server/#running-in-a-virtual-environment",
            "text": "The below assumes ubuntu linux, but applies equally as well to other distributions\nand to windows.  First, the user must create the virtual environment:  ubuntu ~\\$ virtualenv -p python3 /home/ubuntu/py3env  Install Huddle into the environment:  ubuntu ~\\$ /home/ubuntu/py3env/bin/pip install huddle  Create a location for your configuration files:  mkdir /home/ubuntu/huddle_config  Place all JSON configuration files into the configuration directory, then start huddle:  /home/ubuntu/py3env/bin/huddle -c /home/ubuntu/huddle_config  Huddle will then start your applications!",
            "title": "Running in a Virtual Environment"
        },
        {
            "location": "/server/#running-at-startup-linux",
            "text": "The most straightforward method of starting Huddle at startup is to use cron jobs.  crontab -e  Or, if your application requires root permissions:  sudo crontab -u root -e  This will open a text editor that allows you to enter applications to execute at certain\ntimes.  One of these times is at reboot.  Enter the following line at the bottom of the \nfile:  @reboot /home/ubuntu/py3env/bin/huddle -c /home/ubuntu/huddle_config  Now, Huddle will start and run the configuration files at reboot!",
            "title": "Running at Startup (Linux)"
        },
        {
            "location": "/server/#server-considerations",
            "text": "",
            "title": "Server Considerations"
        },
        {
            "location": "/server/#git-executable",
            "text": "Huddle, by default, uses the Git executable already installed on the user's machine\nin order to manipulate the Git repository.  In Windows, the default executable is\nin  C:/Program Files/Git/bin/git .  In Linux, the default executable is in  \\usr\\bin\\git .\nIt is recommended that the  executable  configuration file\nbe used to specify the executable location.",
            "title": "Git Executable"
        },
        {
            "location": "/server/#authentication",
            "text": "When working with remote repositories, you must have the server set up so that you can\nsimply  git clone origin master  on the command line without having to enter a password.\nThis usually involves creating private and public keys on the pulling server and uploading\nthe public key to the repository server, although other methods are available.  In auto-scaling environments, it is recommended to generate this key on the base image\nso that all of the auto-generated machines have access to the key.",
            "title": "Authentication"
        },
        {
            "location": "/commandline/",
            "text": "Command-Line Options\n\n\nGenerally, the application may be executed by simply typing\n\n\nhuddle -c <config file path>\n\n\n\nIn some applications, it may be necessary to specify a command-line option in order to modify\nthe behavior of the executable.\n\n\n\n\n\n\n\n\ncommand line\n\n\nparameter\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n-d\n, \n--debug\n\n\nnone\n\n\ndetailed output on the command line\n\n\n\n\n\n\n-c\n, \n--config\n\n\npath\n\n\npath to the directory containing all configuration files",
            "title": "Command-Line Options"
        },
        {
            "location": "/commandline/#command-line-options",
            "text": "Generally, the application may be executed by simply typing  huddle -c <config file path>  In some applications, it may be necessary to specify a command-line option in order to modify\nthe behavior of the executable.     command line  parameter  description      -d ,  --debug  none  detailed output on the command line    -c ,  --config  path  path to the directory containing all configuration files",
            "title": "Command-Line Options"
        }
    ]
}