{
    "docs": [
        {
            "location": "/",
            "text": "Huddle\n\n\nHuddle is an auto-deployment file and application management tool designed to work well in \nauto-scaling environments in which the end number of servers or clients is unknown.  This \nincludes auto-scaling web servers and IoT devices, amongst others.\n\n\nApplications are controlled through huddle using \nconfiguration files\n\nwhich are written in \n.json\n format.  Each file or application to be controlled will\nhave its own configuration file, which may be as simple or as complex as the user wishes.",
            "title": "Home"
        },
        {
            "location": "/#huddle",
            "text": "Huddle is an auto-deployment file and application management tool designed to work well in \nauto-scaling environments in which the end number of servers or clients is unknown.  This \nincludes auto-scaling web servers and IoT devices, amongst others.  Applications are controlled through huddle using  configuration files \nwhich are written in  .json  format.  Each file or application to be controlled will\nhave its own configuration file, which may be as simple or as complex as the user wishes.",
            "title": "Huddle"
        },
        {
            "location": "/gettingstarted/",
            "text": "Installation\n\n\nHuddle may be installed using pip:\n\n\npip install huddle\n\n\n\nThis will work for most users in most environments.\n\n\nThe most recent revision may also be downloaded from the \n\ngithub repository\n and installed using \n\n\npython setup.py install\n\n\n\nConfiguration\n\n\nFormat\n\n\nHuddle depends on configuration files to perform mosts tasks.  Configuration files are\nin \n.json\n format.  Each file or application to be managed will have one corresponding\nconfiguration file.\n\n\nA simple example of a configuration file would be:\n\n\n{\n    \"repository\": {\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"/home/ubuntu/git_example\"\n    },\n}\n\n\n\nThis configuration file would simply ensure that the local path files are always in\nsync with the remote path files, which are located on the shown git repository.  Huddle \nwill automatically sync the \nlocal path\n with the \nremote path\n repository.\n\n\nSee \nconfig file format\n for more details regarding configuration\nfile settings and for examples.\n\n\nLocation\n\n\nAll config files should reside in the same directory and have an extension of \n.json\n.\nAny file prefixed with an underscore \n_\n will be ignored by huddle.\n\n\n- /home/ubuntu/config_files\n  - /fileset0_config.json \n  - /app0_config.json \n  - /app1_config.json \n  - /_app2_config.json\n\n\n\nThe above file structure would work.  Note that the file structure is flat.  No files are\nto be located in a subdirectory or they will not be parsed.  Note that the\n\n_app2_config.json\n file would be ignored since it has a leading underscore \n_\n.\n\n\nFiles may be located anywhere on the file system to which huddle has access.\n\n\nStarting Huddle\n\n\nOnce installed, huddle may be started by simply \n\n\nhuddle -c <config directory>\n\n\n\nHuddle will automatically manage each file or application according to its configuration.\nSome systems or installs may require the \npython -m\n prefix:\n\n\npython -m huddle -c <config directory>\n\n\n\nTo run the configuration structure shown above, one would execute:\n\n\nhuddle -c /home/ubuntu/config_files",
            "title": "Getting Started"
        },
        {
            "location": "/gettingstarted/#installation",
            "text": "Huddle may be installed using pip:  pip install huddle  This will work for most users in most environments.  The most recent revision may also be downloaded from the  github repository  and installed using   python setup.py install",
            "title": "Installation"
        },
        {
            "location": "/gettingstarted/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/gettingstarted/#format",
            "text": "Huddle depends on configuration files to perform mosts tasks.  Configuration files are\nin  .json  format.  Each file or application to be managed will have one corresponding\nconfiguration file.  A simple example of a configuration file would be:  {\n    \"repository\": {\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"/home/ubuntu/git_example\"\n    },\n}  This configuration file would simply ensure that the local path files are always in\nsync with the remote path files, which are located on the shown git repository.  Huddle \nwill automatically sync the  local path  with the  remote path  repository.  See  config file format  for more details regarding configuration\nfile settings and for examples.",
            "title": "Format"
        },
        {
            "location": "/gettingstarted/#location",
            "text": "All config files should reside in the same directory and have an extension of  .json .\nAny file prefixed with an underscore  _  will be ignored by huddle.  - /home/ubuntu/config_files\n  - /fileset0_config.json \n  - /app0_config.json \n  - /app1_config.json \n  - /_app2_config.json  The above file structure would work.  Note that the file structure is flat.  No files are\nto be located in a subdirectory or they will not be parsed.  Note that the _app2_config.json  file would be ignored since it has a leading underscore  _ .  Files may be located anywhere on the file system to which huddle has access.",
            "title": "Location"
        },
        {
            "location": "/gettingstarted/#starting-huddle",
            "text": "Once installed, huddle may be started by simply   huddle -c <config directory>  Huddle will automatically manage each file or application according to its configuration.\nSome systems or installs may require the  python -m  prefix:  python -m huddle -c <config directory>  To run the configuration structure shown above, one would execute:  huddle -c /home/ubuntu/config_files",
            "title": "Starting Huddle"
        },
        {
            "location": "/configfiles/",
            "text": "Settings\n\n\nAll settings for a particular configuration are encapsulated into a single JSON object\nwhich consists of key-value pairs.  Each section below will consist of an object that\ncontains the keys and information required to properly configure each key.\n\n\nRepository\n\n\nThe \nrepository\n key contains all remote/local relationship data, including paths to the\nexecutable.  This is the most important field and the only one that is actually required.\n\n\n\n\n\n\n\n\nkey\n\n\ndescription\n\n\nvalid values\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nthe name of the remote\n\n\nany string\n\n\n\"origin\"\n\n\n\n\n\n\nremote path\n\n\nthe remote url or path\n\n\nany string\n\n\n-\n\n\n\n\n\n\nlocal path\n\n\nthe local path\n\n\nany string\n\n\n-\n\n\n\n\n\n\nbranch\n\n\nthe git branch to sync\n\n\nany string\n\n\n\"master\"\n\n\n\n\n\n\nexecutable\n\n\nthe executable\n\n\nstring/path\n\n\n\"/usr/bin/git\" or \"C:\\Program Files\\Git\\bin\\git.exe\"\n\n\n\n\n\n\n\n\nExample of \nrepository\n object:\n\n\n{\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"master\",\n        \"type\": \"git\",\n        \"executable\": \"/usr/bin/git\"\n    }\n}\n\n\n\nTesting\n\n\nThe \ntest\n key is reserved, but not currently implemented.\n\n\nTiming\n\n\nIf no timing is specified, then the default will be 60 seconds.  If only a \nminimum\n is\nspecified, then the remote will be checked at that interval.  Finally, if a \nminimum\n\nand a \nmaximum\n are specified, then the remote will be checked for updates at a random\ntime between the \nminimum\n and \nmaximum\n values.\n\n\n\n\n\n\n\n\nkey\n\n\ndescription\n\n\nvalid values\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nminimum\n\n\nminimum time in seconds\n\n\nany integer\n\n\n60\n\n\n\n\n\n\nmaximum\n\n\nmaximum time in seconds\n\n\nany string\n\n\n-\n\n\n\n\n\n\n\n\nExample of \ntiming\n object:\n\n\n\"timing\": {\n    \"minimum\": 30,\n    \"maximum\": 300\n},\n\n\n\nApplication\n\n\nThe \napplication\n key is used to identify the application that is to be started and \nmonitored.  On remote update, this is the application that will be stopped, updated,\nand reloaded.\n\n\n\n\n\n\n\n\nkey\n\n\ndescription\n\n\nvalid values\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nstart\n\n\nthe start executable\n\n\nany integer\n\n\n60\n\n\n\n\n\n\n\n\nExample of \napplication\n object:\n\n\n\"application\": {\n    \"start\": \"python -m dummy_app.py\"\n},\n\n\n\nScripts\n\n\nThere are two times at which an arbitrary script or group of \nscripts\n must be executed\nand that is \npre-pull\n and \npost-pull\n.  The \npre-pull\n scripts are supplied as a JSON \narray, with each being executed in succession.\n\n\nThis \nscripts\n will execute two scripts before the pull and will reboot the machine\nafter the pull\n\n\n\"scripts\": {\n    \"pre-pull\": [\n        \"/bin/ls /home/ubuntu/ > /home/ubuntu/values.txt\", \n        \"/bin/ls /etc/ > /home/ubuntu/values.txt\"\n    ],\n    \"post-pull\": [\"sudo reboot\"]\n}\n\n\n\nExample Configuration Scripts\n\n\nMinimal File Sync\n\n\nThis configuration will keep the local \nC:/_code/_git_example\n directory in synce with the \nremote \ndevelop\n branch.  It will not start or run any applications.\n\n\n{\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"develop\",\n        \"executable\": \"C:/Program Files/Git/bin/git\"\n    }\n}\n\n\n\nSyncing/Run an Application\n\n\nThis configuration will sync every 60s to 600s.  When there is an update, this application \nwill be halted, updated, then restarted after the update.\n\n\n{\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"master\",\n        \"executable\": \"C:/Program Files/Git/bin/git\"\n    },\n\n    \"timing\": {\n        \"minimum\": 60,\n        \"maximum\": 600\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    }\n}\n\n\n\nSync Application/Reboot Server\n\n\nThis configuration will check the remote every 60s and, when new data is available, huddle\nwill stop the application and reboot the machine with a \npost-pull\n script.\n\n\n{\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"executable\": \"/usr/bin/git\"\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    },\n\n    \"scripts\": {\n        \"post-pull\": [\"/sbin/reboot\"]\n    }\n}",
            "title": "Config File Format"
        },
        {
            "location": "/configfiles/#settings",
            "text": "All settings for a particular configuration are encapsulated into a single JSON object\nwhich consists of key-value pairs.  Each section below will consist of an object that\ncontains the keys and information required to properly configure each key.",
            "title": "Settings"
        },
        {
            "location": "/configfiles/#repository",
            "text": "The  repository  key contains all remote/local relationship data, including paths to the\nexecutable.  This is the most important field and the only one that is actually required.     key  description  valid values  default value      remote  the name of the remote  any string  \"origin\"    remote path  the remote url or path  any string  -    local path  the local path  any string  -    branch  the git branch to sync  any string  \"master\"    executable  the executable  string/path  \"/usr/bin/git\" or \"C:\\Program Files\\Git\\bin\\git.exe\"     Example of  repository  object:  {\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"master\",\n        \"type\": \"git\",\n        \"executable\": \"/usr/bin/git\"\n    }\n}",
            "title": "Repository"
        },
        {
            "location": "/configfiles/#testing",
            "text": "The  test  key is reserved, but not currently implemented.",
            "title": "Testing"
        },
        {
            "location": "/configfiles/#timing",
            "text": "If no timing is specified, then the default will be 60 seconds.  If only a  minimum  is\nspecified, then the remote will be checked at that interval.  Finally, if a  minimum \nand a  maximum  are specified, then the remote will be checked for updates at a random\ntime between the  minimum  and  maximum  values.     key  description  valid values  default value      minimum  minimum time in seconds  any integer  60    maximum  maximum time in seconds  any string  -     Example of  timing  object:  \"timing\": {\n    \"minimum\": 30,\n    \"maximum\": 300\n},",
            "title": "Timing"
        },
        {
            "location": "/configfiles/#application",
            "text": "The  application  key is used to identify the application that is to be started and \nmonitored.  On remote update, this is the application that will be stopped, updated,\nand reloaded.     key  description  valid values  default value      start  the start executable  any integer  60     Example of  application  object:  \"application\": {\n    \"start\": \"python -m dummy_app.py\"\n},",
            "title": "Application"
        },
        {
            "location": "/configfiles/#scripts",
            "text": "There are two times at which an arbitrary script or group of  scripts  must be executed\nand that is  pre-pull  and  post-pull .  The  pre-pull  scripts are supplied as a JSON \narray, with each being executed in succession.  This  scripts  will execute two scripts before the pull and will reboot the machine\nafter the pull  \"scripts\": {\n    \"pre-pull\": [\n        \"/bin/ls /home/ubuntu/ > /home/ubuntu/values.txt\", \n        \"/bin/ls /etc/ > /home/ubuntu/values.txt\"\n    ],\n    \"post-pull\": [\"sudo reboot\"]\n}",
            "title": "Scripts"
        },
        {
            "location": "/configfiles/#example-configuration-scripts",
            "text": "",
            "title": "Example Configuration Scripts"
        },
        {
            "location": "/configfiles/#minimal-file-sync",
            "text": "This configuration will keep the local  C:/_code/_git_example  directory in synce with the \nremote  develop  branch.  It will not start or run any applications.  {\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"develop\",\n        \"executable\": \"C:/Program Files/Git/bin/git\"\n    }\n}",
            "title": "Minimal File Sync"
        },
        {
            "location": "/configfiles/#syncingrun-an-application",
            "text": "This configuration will sync every 60s to 600s.  When there is an update, this application \nwill be halted, updated, then restarted after the update.  {\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"branch\": \"master\",\n        \"executable\": \"C:/Program Files/Git/bin/git\"\n    },\n\n    \"timing\": {\n        \"minimum\": 60,\n        \"maximum\": 600\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    }\n}",
            "title": "Syncing/Run an Application"
        },
        {
            "location": "/configfiles/#sync-applicationreboot-server",
            "text": "This configuration will check the remote every 60s and, when new data is available, huddle\nwill stop the application and reboot the machine with a  post-pull  script.  {\n    \"repository\": {\n        \"remote\": \"origin\",\n        \"remote path\": \"https://github.com/slightlynybbled/dummy.git\",\n        \"local path\": \"C:/_code/_git_example\",\n        \"executable\": \"/usr/bin/git\"\n    },\n\n    \"application\": {\n        \"start\": \"python -m dummy_app.py\"\n    },\n\n    \"scripts\": {\n        \"post-pull\": [\"/sbin/reboot\"]\n    }\n}",
            "title": "Sync Application/Reboot Server"
        },
        {
            "location": "/server/",
            "text": "Running in a Virtual Environment\n\n\nThe below assumes ubuntu linux, but applies equally as well to other distributions\nand to windows.\n\n\nFirst, the user must create the virtual environment:\n\n\nubuntu ~\\$ virtualenv -p python3 /home/ubuntu/py3env\n\n\n\nInstall Huddle into the environment:\n\n\nubuntu ~\\$ /home/ubuntu/py3env/bin/pip install huddle\n\n\n\nCreate a location for your configuration files:\n\n\nmkdir /home/ubuntu/huddle_config\n\n\n\nPlace all JSON configuration files into the configuration directory, then start huddle:\n\n\n/home/ubuntu/py3env/bin/huddle -c /home/ubuntu/huddle_config\n\n\n\nHuddle will then start your applications!\n\n\nRunning at Startup (Linux)\n\n\nThe most straightforward method of starting Huddle at startup is to use cron jobs.\n\n\ncrontab -e\n\n\n\nOr, if your application requires root permissions:\n\n\nsudo crontab -u root -e\n\n\n\nThis will open a text editor that allows you to enter applications to execute at certain\ntimes.  One of these times is at reboot.  Enter the following line at the bottom of the \nfile:\n\n\n@reboot /home/ubuntu/py3env/bin/huddle -c /home/ubuntu/huddle_config\n\n\n\nNow, Huddle will start and run the configuration files at reboot!",
            "title": "Server"
        },
        {
            "location": "/server/#running-in-a-virtual-environment",
            "text": "The below assumes ubuntu linux, but applies equally as well to other distributions\nand to windows.  First, the user must create the virtual environment:  ubuntu ~\\$ virtualenv -p python3 /home/ubuntu/py3env  Install Huddle into the environment:  ubuntu ~\\$ /home/ubuntu/py3env/bin/pip install huddle  Create a location for your configuration files:  mkdir /home/ubuntu/huddle_config  Place all JSON configuration files into the configuration directory, then start huddle:  /home/ubuntu/py3env/bin/huddle -c /home/ubuntu/huddle_config  Huddle will then start your applications!",
            "title": "Running in a Virtual Environment"
        },
        {
            "location": "/server/#running-at-startup-linux",
            "text": "The most straightforward method of starting Huddle at startup is to use cron jobs.  crontab -e  Or, if your application requires root permissions:  sudo crontab -u root -e  This will open a text editor that allows you to enter applications to execute at certain\ntimes.  One of these times is at reboot.  Enter the following line at the bottom of the \nfile:  @reboot /home/ubuntu/py3env/bin/huddle -c /home/ubuntu/huddle_config  Now, Huddle will start and run the configuration files at reboot!",
            "title": "Running at Startup (Linux)"
        }
    ]
}